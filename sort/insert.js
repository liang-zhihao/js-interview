function insertSort(array) {
  for (let i = 1; i < array.length; i++) {
    const e = array[i];
    let j = i - 1;
    while (j >= 0 && e < array[j]) {
      array[j + 1] = array[j];
      j--;
    }
    array[j + 1] = e;
  }
  return array;
}
/*

分为已排序部分和未排序部分：

初始化时，假定第一个元素已经排好序，因此已排序部分只有一个元素（即数组的第一个元素）。从第二个元素开始，它属于未排序部分，需要被插入到前面的已排序部分中。
从未排序部分取出元素：

从未排序部分中取出一个元素（通常是从第二个元素开始），称为“当前元素”。
在已排序部分中找到插入位置：

在已排序部分从右向左扫描，寻找当前元素适合插入的位置。
如果已排序部分中的元素比当前元素大，则将这个已排序元素向右移动，为当前元素腾出位置。
插入当前元素：

找到正确的位置后，将当前元素插入到这个位置中。
重复以上步骤：

对剩余的未排序部分重复上述过程，直到整个数组都被排序。

*/
console.log(insertSort([1, 4, 2]));
